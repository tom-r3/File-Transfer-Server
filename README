Built on ASUS Zenbook Laptop, tested on student.cs.uwaterloo.ca unix environment.

DESIGN:

The server is multithreaded. The main thread loops forever, blocking on accept until a connection is present. On a new connection, it starts a new thread for that specific connection. The threads all share access to three synchronized lists which track sockets (both waiting and transferring) as well as keys and are protected by a lock. First, the lists are checked for an opposite match (P/G), and if there is one the socket is placed in the transferring list and the transfer begins. A DONE event is also cleared at the beginning of a thread being added. If the key is not in the lists, it is added to them. At the end, the thread checks if all the lists are empty and if so it sets the DONE event so that the server can end if someone calls F. 

The client sends the control info, then checks the command. On F it simply exits. On P or G it opens the appropriate file or creates a temporary one. It then blocks on recv or send (although the TCP buffer is large enough that it doesnt always block on send) until the server creates a match. Once that happens the client sends or receives all data then terminates.
